<?php

use Wslim\Web\FormHelper;

include '../bootstrap.php';

$code = <<<EOF
### 导读
本节了解web安全涉及的相关知识和内容。<br/><br/>### web安全分析的角度<br/>*&nbsp;web服务器，主机、web服务器、web应用<br/>*&nbsp;web客户端，浏览器、邮件接收、app<br/>*&nbsp;web通信信道，TCP/IP协议模型、ARP、DNS、HTTP、通信控制<br/><br/><br/>### HTTP<br/>HTTP是浏览器和web应用服务器交互的协议。每一次通信过程，都发送一系列HTTP包，包由首部和主体两部分。<br/><br/>HTTP首部是HTTP协议定义的原初指令，用于指示接收方怎么处理其后的内容。Web客户端要在所有请求的开头提供HTTP首部，而Web 服务器也要在任何响应的开头附上HTTP首部。&nbsp;<br/><br/>HTTP首部内容决定了接收方（可能是服务器，也可能是浏览器）如何处理被发送的内容。对于特定的交互而言，有些首部字段是必需的，有些首部字段是可选的，而另外一些首部字段则纯粹是 为了提供额外信息用的。<br/><br/><br/>### HTTP请求方法<br/>方法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;描述<br/>GET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从指定的资源请求数据。查询字符串（名称/值对）是在请求的 URL 中发送<br/>POST&nbsp;&nbsp;&nbsp;&nbsp;查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送<br/>HEAD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与 GET 相同，但只返回 HTTP 报头，不返回文档主体。<br/>PUT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上传指定的 URI 表示。<br/>DELETE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除指定资源。<br/>OPTIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回服务器支持的 HTTP 方法。<br/>CONNECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把请求连接转换到透明的 TCP/IP 通道。<br/><br/><br/>### HTML/CSS/Javascript<br/><br/><br/>### 同源策略 SOP<br/>浏览器中重要的安全措施就是同源策略（Same Origin Policy，SOP）。<br/>同源策略用于限制不同来源的资源之间的交互。&nbsp;<br/><br/>同源策略的含义就是对于不同的页面，如果它们的主机名、协议和端口都相同，那它们就是同一来源的。<br/>如果上述三个属性中有任何一个不一样，那就不能算是同源了。<br/><br/>而同一来源的资源， 即主机名、协议和端口都相同的资源之间的交互，是不受限制的。 初，同源策略只适用于外部资源，后来才扩展到包含其他来源的资源。比如，使用file:// 协议访问本地文件，使用chrome://协议访问浏览器相关的资源等。除了这两个协议之外，现在的浏览器还支持其他一些协议。<br/><br/><br/>### 跨域资源共享 CORS<br/>跨域资源共享，即CORS（cross-origin resource sharing），是一个让来源忽略同源策略的规范。 在宽松的配置下，Web应用可以通过XMLHttpRequest跨域访问任何资源。服务器通过HTTP首部通知浏览器它是否接受访问。&nbsp;<br/><br/>CORS的一项核心内容就是给Web服务器的HTTP响应首部增加了以下字段：&nbsp;<br/>```<br/>Access-Control-Allow-Origin: *&nbsp;<br/>Access-Control-Allow-Methods: POST, GET&nbsp;<br/>```<br/>如果浏览器向某服务器发送了跨域XMLHttpRequest请求，而该服务器的响应首部并不包含以上字段，则这个跨域请求就会失败，即不能访问该服务器响应的内容。这其实就是与同源策略一致。然而，如果Web服务器返回了前面的首部，那么现代浏览器就会遵循CORS规范，允许对该来源响应内容的访问。&nbsp;<br/><br/>### DOM<br/>DOM DOM，即document object model（文档对象模型），是浏览器中的一个基础性概念。<br/>DOM是在浏览器中操作HTML或XML文档的API，使用脚本语言可以通过DOM提供的对象操作HTML元素。&nbsp;<br/>DOM是为JavaScript这样的脚本语言而定义的。<br/>DOM规范定义了通过脚本操作实时文档的方法，即浏览器中运行的脚本可以动态读取或修改网页内容。这样一来，网页可以不经过服务器就更新自己的内容，而且也不用用户参与。&nbsp;<br/><br/><br/>### HTML5<br/>HTML5是HTML的新版本，大幅增强了原有功能，进而增强了用户体验。 从安全角度来说，明显的变化就是攻击面增大了。HTML5新增的很多方法暴露了HTML4 没有暴露过的漏洞。<br/><br/>1.&nbsp;WebSocket&nbsp;<br/>WebSocket是一种浏览器技术，利用它可以在浏览器与服务器之间打开一条即时响应的全双 工信道。这样一来，不使用服务器轮询也可以实现高标准的事件驱动系统。&nbsp;<br/>WebSocket替代了Comet11等基于Ajax的服务器端推送技术。但Comet需要客户端库， WebSocket API则完全是现代浏览器中的本地技术。包括IE10在内的所有现代浏览器都原生支持 WebSocket，只有Opera Mini和安卓的原生浏览器例外。&nbsp;<br/><br/>2.&nbsp;Web Worker&nbsp;<br/>Web Worker之前的JavaScript代码都是单线程执行的。而要想实现并发，开发者就要依赖 setTimeout()和setInterval()。&nbsp;<br/><br/>HTML5新增了Web Worker，可以看作在浏览器后台运行的线程。有两种Web Worker：一种 可以在同一来源的资源间共享，另一种只能与创建它的函数通信。&nbsp;<br/><br/>虽然这个API也有一些局限，但仍然给开发人员提供了更多的灵活性。当然，攻击者因此也有了更多方式对浏览器发起攻击。&nbsp;<br/><br/>3.&nbsp;操作历史&nbsp;<br/>Web浏览器历史功能随着浏览器的变化，也在不断发展变化。&nbsp;<br/><br/>以前，浏览器只要跟踪用户点了哪个链接才跳到新页面就行了。今天，点击链接可能会导致脚本执行并渲染页面，而这被视为用户体验的一个重要里程碑。&nbsp;<br/><br/>HTML5提供了操作历史记录的很多方法。使用历史对象，脚本可以添加或删除位置，也可以在历史链中向前或向后移动当前页面。&nbsp;<br/><br/>4.&nbsp;Web 存储&nbsp;<br/>Web 存储（Web storage）又称DOM存储（DOM storage），原来是HTML5规范的一部分，现在已经剥离出来。<br/><br/>可以把Web存储看成超级cookie。 与cookie类似，Web 存储有两种存储机制：一种可以将数据持久保存在本地，另一种只在会话期间保存数据。具体来说，本地存储（local storage）负责存储持久数据，用户多次访问都可以 存取；会话存储（session storage）负责存储会话数据，只在创建该数据的标签页内有效。&nbsp;<br/><br/>cookie与Web存储的一个主要区别，就是只有JavaScript可以创建Web存储，HTTP首部不行了，而且Web存储中的数据也不会随请求发送给服务器。Web存储的数据量也比以往的cookie 多得多，但也因浏览器而异，不过至少也有5 MB。另一个主要区别就是本地存储没有所谓的路径限制。<br/><br/>Web Storage Api<br/>```<br/>sessionStorage.setItem(&quot;BHH&quot;, &quot;http://browserhacker.com&quot;);&nbsp;<br/>sessionStorage.getItem(&quot;BHH&quot;);&nbsp;<br/>```<br/><br/>### Geolocation&nbsp;<br/>Geolocation API是为移动和桌面浏览器访问设备地理位置信息而开发的。该API可以通过 GPS、蜂窝小区三角测量、IP地理定位和本地Wi-Fi热点取得地理位置信息。&nbsp;<br/><br/>现实世界中有很多滥用地理位置信息的例子。为此，浏览器也增加了很多严密的安全措施， 使得攻击的主要方法只剩社会工程了。<br/><br/><br/>### 浏览器渲染引擎<br/>1.&nbsp;WebKit&nbsp;<br/>WebKit是受欢迎的渲染引擎，很多浏览器都在用。著名的是苹果的Safari，早期的谷歌Chrome也用过它。应该说，WebKit是当今流行的渲染引擎之一。&nbsp;<br/>WebKit是一个开源项目，它的目标是成为通用的软件应用程序交互与展示引擎8。除了在浏 览器中使用，还有邮件客户端和即时通信系统也在使用它。&nbsp;<br/><br/>2.&nbsp;Trident&nbsp;<br/>Trident是微软开发的渲染引擎，也叫MSHTML。IE使用的Trident是闭源的，这一点不难想见。 Trident算是第二流行的渲染引擎。&nbsp;<br/>与WebKit类似，Trident也被用于浏览器之外的软件中，比如Google Talk。软件可以通过调用 Windows系统中的mshtml.dll动态链接库来使用这个引擎。<br/>Trident首次出现在Internet Explorer的第四个版本中，一直非常稳定。微软新的IE至今还使 用Trident作为核心渲染引擎。&nbsp;<br/><br/>3.&nbsp;Gecko&nbsp;<br/>Firefox是使用Gecko开源渲染引擎的主要的软件。Gecko应该是排在WebKit和Trident之后位居第三的渲染引擎。&nbsp;<br/>Gecko是网景公司20世纪90年代为其浏览器Netscape Navigator开发的一个渲染引擎。目前， Gecko主要用在Mozilla基金会和Mozilla公司开发的一些应用中，主要的就是Firefox浏览器。&nbsp;<br/><br/>4.&nbsp;Presto&nbsp;<br/>Presto 是Opera的渲染引擎。但Opera团队在2013年宣布将很快放弃其自家的Presto，迁移至WebKit Chromium9。WebKit Chromium后来改名为Blink（后面会介绍）。 一个主流浏览器如此巨大地切换路线，应该说是前所未有的。而且，这样一来，Presto注定会消亡，成为浏览器大战的牺牲品。&nbsp;<br/><br/>5.&nbsp;Blink&nbsp;<br/>2013年，谷歌宣布从WebKit分支出来，创建了新的Blink渲染引擎。Blink初致力于更好地 支持Chrome的多进程架构，降低该浏览器的内部复杂度。<br/><br/><br/>### 常见词汇<br/>security&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安全<br/>vulnerability&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;漏洞，隐患<br/>scan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;扫描<br/>sniffer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;嗅探<br/>phishing&nbsp;&nbsp;&nbsp;&nbsp;钓鱼<br/>docking&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;肉鸡<br/>hook&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;钩子<br/></p>
EOF;


function testForm()
{
    $o = FormHelper::checkbox('aaa');
    print_r($o);
    
    $o = FormHelper::checkbox_group('aaa', [3,4], ['data_source' => '1|a, 2|b, 3|c, 4|d']);
    print_r($o);
}
testForm();

